{"version":3,"sources":["assets/sortinghatlogo.png","components/Title.js","components/GreatHall.js","components/houses/HouseComponent.js","components/HouseRouter.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","src","Hat","alt","to","GreatHall","HouseComponent","props","house","houseConditional","HouseRouter","houses","sorted","Math","floor","random","length","pickHouse","Routes","exact","path","component","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,4C,qVCoB5BC,MAhBf,WACE,OACE,yBAAKC,UAAU,gBACb,uBAAGA,UAAU,QACX,iDAEF,wBAAIA,UAAU,SAAd,sBACA,yBAAKA,UAAU,iBACb,yBAAKC,IAAKC,IAAKC,IAAI,iBAErB,kBAAC,IAAD,CAAMH,UAAU,SAASI,GAAG,aAA5B,4B,MCESC,MAZf,WACI,OACE,6BACI,yBAAKL,UAAU,aACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,gBAAf,2BAAsD,6BAAtD,kCAA+F,6BAA/F,yBAA2H,6BAA3H,oCAAsK,6BAAtK,IAA6K,6BAA7K,iCACA,kBAAC,IAAD,CAAMA,UAAU,aAAaI,GAAG,eAAhC,oB,MCyBKE,MAjCf,SAAwBC,GACpB,IAAIC,EAAQD,EAAMC,MAoBlB,OACI,6BACI,yBAAKR,UAAU,aACf,wBAAIA,UAAU,gBAAd,eAAyC,0BAAMA,UAAU,cAAcQ,IAtB/E,SAA0BA,GACtB,OAAQA,GACJ,IAAK,aAED,OADAA,EAAQ,aACD,yBAAKR,UAAU,oBAC1B,IAAK,aAED,OADAQ,EAAQ,aACD,yBAAKR,UAAU,oBAC1B,IAAK,YAED,OADAQ,EAAQ,YACD,yBAAKR,UAAU,mBAC1B,IAAK,YAED,OADAQ,EAAQ,YACD,yBAAKR,UAAU,qBAWzBS,CAAiBD,GAClB,yBAAKR,UAAU,WACf,yBAAKA,UAAU,aCHZU,MARf,WACI,OACI,6BApBR,WACI,IAAIC,EAAS,CAAC,aAAc,YAAa,YAAa,cAClDC,EAASC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAE/C,MAAuB,eAAnBL,EAAOC,GACA,kBAAC,EAAD,CAAgBJ,MAAOG,EAAO,KAEb,cAAnBA,EAAOC,GACL,kBAAC,EAAD,CAAgBJ,MAAOG,EAAO,KAEb,eAAnBA,EAAOC,GACL,kBAAC,EAAD,CAAgBJ,MAAOG,EAAO,KAG9B,kBAAC,EAAD,CAAgBH,MAAOG,EAAO,KAOhCM,KCjBQC,E,uKAEb,OAEQ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,aAAaC,UAAWhB,IACpC,kBAAC,IAAD,CAAOe,KAAK,eAAeC,UAAWX,S,GAPtBY,aCWrBC,MAXf,WAEE,OACE,6BACE,yBAAKvB,UAAU,cACb,kBAAC,EAAD,SCCYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OACOC,SAASC,eAAe,SDuHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.11cb5c5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sortinghatlogo.e111b1a3.png\";","import React from \"react\";\r\nimport \"./Title.css\";\r\nimport Hat from \"../assets/sortinghatlogo.png\";\r\nimport {Link} from \"react-router-dom\";\r\nfunction Title() {\r\n  return (\r\n    <div className=\"text-wrapper\">\r\n      <p className=\"text\">\r\n        <strong>Harry Potter</strong>\r\n      </p>\r\n      <h2 className=\"text2\">Sorting&nbsp;&nbsp;Hat</h2>\r\n      <div className=\"img-container\">\r\n        <img src={Hat} alt=\"sorting hat\" />\r\n      </div>\r\n      <Link className=\"button\" to=\"GreatHall\">Let the sorting begin!</Link>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport './GreatHall.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction GreatHall() {\r\n    return (\r\n      <div>\r\n          <div className=\"gold-svg\"></div>\r\n          <div className=\"hogwarts-crest\"></div>\r\n          <div className=\"castle\"></div>\r\n          <div className=\"sorting-text\">Are you Brave of heart? <br />&nbsp;&nbsp;Cunning and Ambitious? <br /> Loyal and Dedicated? <br /> &nbsp;&nbsp;Or Clever and Creative? <br /> <br /> Click to find out your house</div>\r\n          <Link className=\"button-two\" to=\"HouseRouter\">Discover House</Link>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default GreatHall;","import React from 'react'\r\nimport './HouseComponent.css';\r\n\r\nfunction HouseComponent(props) {\r\n    let house = props.house;\r\n    function houseConditional(house) {\r\n        switch (house) {\r\n            case \"Hufflepuff\":\r\n                house = \"Hufflepuff\";\r\n                return <div className=\"gryffindor-logo\"></div>\r\n            case \"Gryffindor\":\r\n                house = \"Gryffindor\";\r\n                return <div className=\"gryffindor-logo\"></div>\r\n            case \"Slytherin\":\r\n                house = \"Slytherin\";\r\n                return <div className=\"slytherin-logo\"></div>\r\n            case \"Ravenclaw\":\r\n                house = \"Ravenclaw\";\r\n                return <div className=\"gryffindor-logo\"></div>\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"gold-svg\"></div>\r\n            <h1 className=\"house-styles\"> Welcome to <span className=\"house-text\">{house}</span></h1>\r\n            {/* <div className=\"house-styles\">{props.house}</div> */}\r\n            {houseConditional(house)}\r\n            <div className=\"castle\"></div>\r\n            <div className=\"button\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HouseComponent;\r\n","import React from 'react'\r\nimport HouseComponent from './houses/HouseComponent.js';\r\nfunction pickHouse() {\r\n    var houses = ['Gryffindor', 'Slytherin', 'Ravenclaw', 'Hufflepuff'];\r\n    var sorted = Math.floor(Math.random() * houses.length)\r\n    // console.log(houses[sorted]);\r\n    if (houses[sorted] === \"Gryffindor\") {\r\n        return <HouseComponent house={houses[0]}/>\r\n    }\r\n    else if (houses[sorted] === \"Slytherin\") {\r\n        return <HouseComponent house={houses[1]}/>\r\n    }\r\n    else if (houses[sorted] === \"Hufflepuff\") {\r\n        return <HouseComponent house={houses[2]}/>\r\n    }\r\n    else {\r\n        return <HouseComponent house={houses[3]}/>\r\n    }\r\n}\r\n\r\nfunction HouseRouter() {\r\n    return (\r\n        <div>\r\n            {pickHouse()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HouseRouter;\r\n","import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n//import history from './history';\r\nimport Title from \"./components/Title.js\";\r\nimport GreatHall from './components/GreatHall.js';\r\nimport HouseRouter from './components/HouseRouter.js';\r\nexport default class Routes extends Component {\r\n    render() {\r\n        return (\r\n            \r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Title} />\r\n                    <Route path=\"/GreatHall\" component={GreatHall} />\r\n                    <Route path=\"/HouseRouter\" component={HouseRouter} />\r\n                </Switch>\r\n            \r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./reset.css\";\r\nimport \"./App.css\";\r\nimport \"./components/Button.css\";\r\nimport Routes from \"./routes\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"background\">\r\n        <Routes />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}